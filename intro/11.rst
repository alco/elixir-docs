11 Processes
==========================================================

.. contents:: :local:

In Elixir, all code runs inside processes. Processes are isolated from
each other, run concurrent to one another and communicate via message
passing. Processes are not only the basis for concurrency in Elixir, but
they also provide the means for building distributed and fault-tolerant
programs.

Elixir's processes should not be confused with operating system
processes. Processes in Elixir are extremely lightweight in terms of
memory and CPU (unlike threads in many other programming languages).
Because of this, it is not uncommon to have dozens of thousands of
processes running simultaneously.

In this chapter, we will learn about the basic constructs for spawning
new processes, as well as sending and receiving messages between
different processes.

11.1 spawn
----------

The basic mechanism for spawning new processes is with the auto-imported
``spawn/1`` function:

.. code:: iex

    iex> spawn fn -> 1 + 2 end
    #PID<0.43.0>

``spawn/1`` takes a function which it will execute in another process.

Notice ``spawn/1`` returns a PID (process identifier). At this point,
the process you spawned is very likely dead. The spawned process will
execute the given function and exit after the function is done:

.. code:: iex

    iex> pid = spawn fn -> 1 + 2 end
    #PID<0.44.0>
    iex> Process.alive?(pid)
    false

    Note: you will likely get different process identifiers than the
    ones we are getting in this guide.

We can retrieve the PID of the current process by calling ``self/0``:

.. code:: iex

    iex> self()
    #PID<0.41.0>
    iex> Process.alive?(self())
    true

Processes get much more interesting when we are able to send and receive
messages.

11.2 send and receive
---------------------

We can send messages to a process with ``send/2`` and receive them with
``receive/1``:

.. code:: iex

    iex> send self(), {:hello, "world"}
    {:hello, "world"}
    iex> receive do
    ...>   {:hello, msg}  -> msg
    ...>   {:world, msg} -> "won't match"
    ...> end
    "world"

When a message is sent to a process, the message is stored in the
process mailbox. The ``receive/2`` block goes through the current
process mailbox searching for a message that matches any of the given
patterns. ``receive/1`` supports many clauses, like ``case/2``, as well
as guards in the clauses.

If there is no message in the mailbox matching any of the patterns, the
current process will wait until a matching message arrives. A timeout
can also be specified:

.. code:: iex

    iex> receive do
    ...>   {:hello, msg}  -> msg
    ...> after
    ...>   1_000 -> "nothing after 1s"
    ...> end
    "nothing after 1s"

A timeout of 0 can be given when you already expect the message to be in
the mailbox.

Let's put all together and send messages in between processes:

.. code:: iex

    iex> parent = self()
    #PID<0.41.0>
    iex> spawn fn -> send(parent, {:hello, self()}) end
    #PID<0.48.0>
    iex> receive do
    ...>   {:hello, pid} -> "Got hello from #{inspect pid}"
    ...> end
    "Got hello from #PID<0.48.0>"

While in the shell, you may find the helper ``flush/0`` quite useful. It
flushes and prints all the messages in the mailbox.

.. code:: iex

    iex> send self(), :hello
    :hello
    iex> flush()
    :hello
    :ok

Before we finish this chapter, let's talk about process links.

11.3 Links
----------

The most common form of spawning in Elixir is actually via
``spawn_link/1``. Before we show an example with ``spawn_link/1``, let's
try to see what happens when a process fails:

.. code:: iex

    iex> spawn fn -> raise "oops" end
    #PID<0.58.0>

Well... nothing happened. That's because processes are isolated. If we
want the failure in one process to propagate to another one, we should
link them. This can be done with ``spawn_link/1``:

.. code:: iex

    iex> spawn_link fn -> raise "oops" end
    #PID<0.60.0>
    ** (EXIT from #PID<0.60.0>) {RuntimeError[message: "oops"], [{:erlang, :apply, 2, []}]}

When a failure happens in the shell, the shell automatically traps the
failure and shows it nicely formatted. In order to understand what would
really happen in our code, let's use ``spawn_link/1`` inside a file and
run it:

.. code:: iex

    # spawn.exs
    spawn_link fn -> raise "oops" end

    receive do
      :hello -> "let's wait until the process fails"
    end

This time the process failed and brought the parent process down as they
are linked. Linking can also be done manually by calling
``Process.link/2``. We recommend you to take a look at `the ``Process``
module </docs/stable/elixir/Process.html>`__ for other functionality
provided by processes.

Process and links play an important role when building fault-tolerant
systems. In Elixir applications we often link our processes to
supervisors which will detect when a process die and start a new process
in its place. This is only possible because processes don't share
anything by default so there is no way the crash of a process can
corrupt the state of another process!

While other languages would require us to catch/handle exceptions, in
Elixir we are actually fine with letting process fail because we expect
supervisors to properly restart our systems. "Failing fast" is a common
philosophy when writing Elixir software!

Next we'll explore the world of IO.
