12 IO
==========================================================

.. contents:: :local:

This chapter is a quick introduction to input/output mechanisms in
Elixir and related modules, like
```IO`` </docs/stable/elixir/IO.html>`__,
```File`` </docs/stable/elixir/File.html>`__ and
```Path`` </docs/stable/elixir/Path.html>`__.

We had originally sketched this chapter to come much earlier in the
getting started guide. However, we noticed the IO system provides a
great opportunity to shed some light on some philosophies and
curiosities of Elixir and the VM.

12.1 The IO module
------------------

The ``IO`` module in Elixir is the main mechanism for reading and
writing to the standard io (``:stdio``), standard error (``:stderr``),
files and other IO devices. Usage of the module is pretty
straight-forward:

.. code:: iex

    iex> IO.puts "hello world"
    "hello world"
    :ok
    iex> IO.gets "yes or no? "
    yes or no? yes
    "yes\n"

By default, the functions in the IO module use the standard input and
output. We can pass the ``:stderr`` as argument to write to the standard
error device:

.. code:: iex

    iex> IO.puts :stderr, "hello world"
    "hello world"
    :ok

12.2 The File module
--------------------

The ```File`` </docs/stable/elixir/File.html>`__ module contains
functions that allows us to open files as IO devices. By default, files
are opened in binary mode, which requires developers to use the specific
``IO.binread/2`` and ``IO.binwrite/2`` functions from the ``IO`` module:

.. code:: iex

    iex> {:ok, file} = File.open "hello", [:write]
    {:ok, #PID<0.47.0>}
    iex> IO.binwrite file, "world"
    :ok
    iex> File.close file
    :ok
    iex> File.read "hello"
    {:ok, "world"}

A file can also be opened with ``:utf8`` encoding which allows the
remaining functions in the ``IO`` module to be used:

.. code:: iex

    iex> {:ok, file} = File.open "another", [:write, :utf8]
    {:ok, #PID<0.48.0>}

Besides functions for opening, reading and writing files, the ``File``
module has many functions that work on the file system. Those functions
are named after their UNIX equivalents. For example, ``File.rm/1`` can
be used to remove files, ``File.mkdir/1`` to create directories,
``File.mkdir_p/1`` creates directories guaranteeing their parents exists
and there is even ``File.cp_r/2`` and ``File.rm_rf/2`` which copy and
remove files and directories recursively.

You will also notice that functions in the ``File`` module have two
variants, one with ``!`` (bang) in its name and others without. For
example, when we read the "hello" file above, we have used the one
without ``!``. Let's try some new examples:

.. code:: iex

    iex> File.read "hello"
    {:ok, "world"}
    iex> File.read! "hello"
    "world"
    iex> File.read "unknown"
    {:error, :enoent}
    iex> File.read! "unknown"
    ** (File.Error) could not read file unknown: no such file or directory

Notice that when the file does not exist, the version with ``!`` raises
an error. That said, the version without ``!`` is preferred when you
want to handle different outcomes with pattern matching. However, if you
expect the file to be there, the bang variation is more useful as it
raises a meaningful error message. That said, never write:

.. code:: elixir

    {:ok, body} = File.read(file)

Instead write:

.. code:: elixir

    case File.read(file) do
      {:ok, body} -> # handle ok
      {:error, r} -> # handle error
    end

or

.. code:: elixir

    File.read!(file)

12.3 The Path module
--------------------

The majority of the functions in the File module expects paths as
arguments. Most commonly, those paths will be binaries and they can be
manipulated with the ```Path`` </docs/stable/elixir/Path.html>`__
module:

.. code:: iex

    iex> Path.join("foo", "bar")
    "foo/bar"
    iex> Path.expand("~/hello")
    "/Users/jose/hello"

With this we have covered the main modules for doing IO and interacting
with the file system. Next we will discuss some curiosities and advanced
topics regarding IO. Those sections are not necessary to write Elixir
code, so feel free to skip them, but they do provide an overview of how
the IO system is implemented in the VM and other curiosities.

12.4 Processes and group leaders
--------------------------------

You may have noticed that ``File.open/2`` returned a tuple containing a
PID:

.. code:: iex

    iex> {:ok, file} = File.open "hello", [:write]
    {:ok, #PID<0.47.0>}

That's because the IO module actually works with processes. When you say
``IO.write(pid, binary)``, the IO module will send a message to the
process with the desired operation. Let's see what happens if we use our
own process:

.. code:: iex

    iex> pid = spawn fn ->
    ...>  receive do: (msg -> IO.inspect msg)
    ...> end
    #PID<0.57.0>
    iex> IO.write(pid, "hello")
    {:io_request, #PID<0.41.0>, #PID<0.57.0>, {:put_chars, :unicode, "hello"}}
    ** (ErlangError) erlang error: :terminated

After ``IO.write/2``, we can see the request sent by the IO module
printed, which then fails since the IO module expected some kind of
result that we did not supply.

The ```StringIO`` </docs/stable/elixir/StringIO.html>`__ module provides
an implementation of the IO device messages on top of a string:

.. code:: iex

    iex> {:ok, pid} = StringIO.open("hello")
    {:ok, #PID<0.43.0>}
    iex> IO.read(pid, 2)
    "he"

By modelling IO devices with processes, the Erlang VM allows different
nodes in the same network to exchange file processes to read/write files
in between nodes. Of all IO devices, there is one that is special to
each process, called group leader.

When you write to ``:stdio``, you are actually sending a message to the
group leader, which writes to STDIO file descriptor:

.. code:: iex

    iex> IO.puts :stdio, "hello"
    hello
    :ok
    iex> IO.puts Process.group_leader, "hello"
    hello
    :ok

The group leader can be configured per process and is used in different
situations. For example, when executing code in a remote terminal, it
guarantees messages in a remote node are redirected and printed in the
terminal that triggered the request.

12.5 ``iodata`` and ``chardata``
--------------------------------

In all examples above, we have used binaries/strings when writing to
files. In the chapter "Binaries, strings and char lists", we mentioned
how strings are simply bytes while char lists are lists with code
points.

The functions in ``IO`` and ``File`` also allow lists to be given as
arguments. Not only that, they also allow a mixed list of lists,
integers and binaries to be given:

.. code:: iex

    iex> IO.puts 'hello world'
    hello world
    :ok
    iex> IO.puts ['hello', ?\s, "world"]
    hello world
    :ok

However, this requires some attention. A list may represent either a
bunch of bytes or a bunch of characters and which one to use depends on
the encoding of the IO device. If the file is opened without encoding,
the file is expected to be in raw mode, and the functions in the ``IO``
module starting with ``bin*`` must be used. Those functions expect an
``iodata`` as argument, i.e. it expects a list of integers representing
bytes and binaries to be given.

On the other hand, ``:stdio`` and files opened with ``:utf8`` encoding
work with the remaining functions in the ``IO`` module and those expect
a ``char_data`` as argument, i.e. they expect a list of characters or
strings to be given.

Although this is a subtle difference, you only need to worry about those
details if you intend to pass lists to those functions. Binaries are
already represented by the underlying bytes and as such their
representation is always raw.

This finishes our tour of IO devices and IO related functionality. We
have learned about four Elixir modules,
```IO`` </docs/stable/elixir/IO.html>`__,
```File`` </docs/stable/elixir/File.html>`__,
```Path`` </docs/stable/elixir/Path.html>`__ and
```StringIO`` </docs/stable/elixir/StringIO.html>`__, as well as how the
VM uses processes for the underlying IO mechanisms and how to use (char
and io) data for IO operations.
